     1                                 %line 1+1 ass9.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 
    22                                 
    23                                 
    24                                 
    25                                 
    26                                 
    27                                 
    28                                 
    29                                 
    30                                 
    31                                 
    32                                 
    33                                 %line 75+1 ass9.asm
    34                                 
    35                                 
    36                                 
    37                                 
    38                                 
    39                                 
    40                                 
    41                                 
    42                                 
    43                                 
    44                                 
    45                                 
    46                                 
    47                                 
    48                                 
    49                                 
    50                                 
    51                                 
    52                                 
    53                                 
    54                                 
    55                                 
    56                                 
    57                                 
    58                                 
    59                                 
    60                                 
    61                                 
    62                                 
    63                                 [section .data]
    64                                 
    65                                 
    66                                 
    67                                 
    68                                 TRUE equ 1
    69                                 FALSE equ 0
    70                                 
    71                                 SUCCESS equ 0
    72                                 NOSUCCESS equ 1
    73                                 
    74                                 STDIN equ 0
    75                                 STDOUT equ 1
    76                                 STDERR equ 2
    77                                 
    78                                 SYS_read equ 0
    79                                 SYS_write equ 1
    80                                 SYS_open equ 2
    81                                 SYS_close equ 3
    82                                 SYS_fork equ 57
    83                                 SYS_exit equ 60
    84                                 SYS_creat equ 85
    85                                 SYS_time equ 201
    86                                 
    87                                 LF equ 10
    88                                 NULL equ 0
    89                                 ESC equ 27
    90                                 
    91                                 BUFFSIZE equ 50
    92                                 MINNUMBER equ 1
    93                                 MAXNUMBER equ 1000
    94                                 
    95                                 OUTOFRANGEMIN equ 2
    96                                 OUTOFRANGEMAX equ 3
    97                                 INPUTOVERFLOW equ 4
    98                                 ENDOFINPUT equ 5
    99                                 
   100                                 
   101                                 
   102 00000000 00000000               len dd 0
   103                                 
   104                                 
   105                                 
   106                                 
   107 00000004 00                     swapped db FALSE
   108                                 
   109                                 
   110                                 
   111                                 
   112 00000005 06000000               ddSix dd 6
   113                                 
   114                                 
   115                                 
   116                                 
   117 00000009 04000000               ddFour dd 4
   118                                 
   119                                 
   120                                 
   121                                 
   122                                 
   123                                 
   124                                 
   125                                 
   126                                 
   127                                 
   128                                 [section .bss]
   129                                 
   130 00000000 <gap>                  binaryString resb BUFFSIZE+2
   131 00000034 <gap>                  chr resb 1
   132                                 
   133                                 
   134                                 
   135                                 
   136                                 [section .text]
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 
   143                                 
   144                                 
   145                                 
   146                                 
   147                                 
   148                                 
   149                                 
   150                                 
   151                                 
   152                                 
   153                                 
   154                                 
   155                                 
   156                                 
   157                                 
   158                                 
   159                                 
   160                                 
   161                                 
   162                                 [global readBinaryNum]
   163                                 readBinaryNum:
   164                                 
   165 00000000 56                     push rsi
   166 00000001 51                     push rcx
   167 00000002 52                     push rdx
   168 00000003 53                     push rbx
   169 00000004 4154                   push r12
   170 00000006 4150                   push r8
   171                                 
   172 00000008 4989F8                  mov r8,rdi
   173                                 
   174 0000000B 48C7C3[00000000]        mov rbx, binaryString
   175 00000012 49C7C400000000          mov r12,0
   176 00000019 C70425[00000000]00-     mov dword[len], 0
   177 00000019 000000             
   178                                 
   179                                 
   180                                 
   181                                 
   182                                  leadingSpace:
   183 00000024 48C7C100000000          mov rcx, 0
   184                                 
   185 0000002B 48C7C000000000          mov rax, SYS_read
   186 00000032 48C7C700000000          mov rdi, STDIN
   187 00000039 48C7C6[00000000]        mov rsi, chr
   188 00000040 48C7C201000000          mov rdx, 1
   189 00000047 0F05                    syscall
   190                                 
   191 00000049 48C7C100000000          mov rcx, 0
   192 00000050 8A0C25[00000000]        mov cl, byte[chr]
   193 00000057 80F90A                  cmp cl, LF
   194 0000005A 7459                    je readDone
   195                                 
   196 0000005C 80F909                  cmp cl, 0x09
   197 0000005F 74C1                    je leadingSpace
   198                                 
   199 00000061 80F920                  cmp cl, 0x20
   200 00000064 74BC                    je leadingSpace
   201                                 
   202 00000066 EB3D                    jmp firstChr
   203                                 
   204                                 
   205                                  readCharacters:
   206 00000068 48C7C000000000          mov rax, 0
   207 0000006F 48C7C100000000          mov rcx, 0
   208                                 
   209 00000076 48C7C000000000          mov rax, SYS_read
   210 0000007D 48C7C700000000          mov rdi, STDIN
   211 00000084 48C7C6[00000000]        mov rsi, chr
   212 0000008B 48C7C201000000          mov rdx, 1
   213 00000092 0F05                    syscall
   214                                 
   215 00000094 48C7C100000000          mov rcx, 0
   216 0000009B 8A0C25[00000000]        mov cl, byte[chr]
   217 000000A2 80F90A                  cmp cl ,LF
   218 000000A5 740E                    je readDone
   219                                 
   220                                  firstChr:
   221                                 
   222 000000A7 49FFC4                  inc r12
   223 000000AA 4983FC32                cmp r12, BUFFSIZE
   224 000000AE 73B6                    jae readCharacters
   225                                 
   226 000000B0 880B                    mov byte[rbx], cl
   227 000000B2 48FFC3                  inc rbx
   228                                 
   229 000000B5 EBAF                    jmp readCharacters
   230                                 
   231                                  readDone:
   232                                 
   233                                 
   234                                 
   235                                 
   236 000000B7 4983FC32                cmp r12, BUFFSIZE
   237 000000BB 0F8FBF000000            jg overFlow
   238                                 
   239 000000C1 4983FC00                cmp r12,0
   240 000000C5 0F84D9000000            je noInput
   241                                 
   242 000000CB 41C68424[00000000]-     mov byte[binaryString+r12],NULL
   243 000000CB 00                 
   244                                 
   245 000000D4 44892425[00000000]      mov dword[len], r12d
   246                                 
   247                                 
   248                                 
   249                                 
   250                                 
   251                                 
   252                                 
   253 000000DC 48C7C100000000          mov rcx, 0
   254                                 
   255 000000E3 48C7C3[00000000]        mov rbx, binaryString
   256                                 
   257                                  binaryCheck:
   258 000000EA 48C7C000000000          mov rax, 0
   259 000000F1 8A040B                  mov al, byte[rbx+rcx]
   260                                 
   261 000000F4 3C30                    cmp al, 0x30
   262 000000F6 0F8C8D000000            jl notBinary
   263                                 
   264 000000FC 3C31                    cmp al, 0x31
   265 000000FE 0F8785000000            ja notBinary
   266                                 
   267 00000104 48FFC1                  inc rcx
   268                                 
   269 00000107 4C39E1                  cmp rcx,r12
   270 0000010A 72DC                    jb binaryCheck
   271                                 
   272                                 
   273                                 
   274                                 
   275                                 
   276                                 
   277 0000010C 48C7C3[00000000]        mov rbx, binaryString
   278                                 
   279                                 
   280                                 %line 318+0 ass9.asm
   281 00000113 51                      push rcx
   282 00000114 56                      push rsi
   283 00000115 4151                    push r9
   284 00000117 4154                    push r12
   285                                 
   286 00000119 49C7C400000000          mov r12, 0
   287 00000120 448B2425[00000000]      mov r12d, dword[len]
   288 00000128 41FFCC                  dec r12d
   289                                 
   290 0000012B 41C70000000000          mov dword [r8], 0
   291 00000132 4C89E1                  mov rcx, r12
   292 00000135 4889DE                  mov rsi, rbx
   293                                 
   294                                 
   295                                  ..@4.convertLoop:
   296 00000138 49C7C400000000          mov r12,0
   297 0000013F 448A26                  mov r12b, byte [rsi]
   298                                 
   299 00000142 41B901000000            mov r9d , 1
   300                                 
   301                                 
   302 00000148 4180FC31                cmp r12b, "1"
   303 0000014C 7504                    jne ..@4.notA1
   304                                 
   305 0000014E 41D3E1                  shl r9d, cl
   306 00000151 450108                  add dword[r8], r9d
   307                                 
   308                                  ..@4.notA1:
   309                                 
   310 00000154 48FFC6                  inc rsi
   311 00000157 48FFC9                  dec rcx
   312                                 
   313 0000015A 4180FC00                cmp r12b, NULL
   314 0000015E 75D6                    jne ..@4.convertLoop
   315                                 
   316 00000160 415C                    pop r12
   317 00000162 4159                    pop r9
   318 00000164 5E                      pop rsi
   319 00000165 59                      pop rcx
   320                                 
   321                                 %line 319+1 ass9.asm
   322 00000166 48C7C600000000          mov rsi, 0
   323 0000016D 418B30                  mov esi, dword[r8]
   324                                 
   325 00000170 83FE01                  cmp esi, MINNUMBER
   326 00000173 7221                    jb lessThanMin
   327                                 
   328 00000175 81FEE8030000            cmp esi, MAXNUMBER
   329 0000017B 7722                    ja greaterThanMax
   330                                 
   331                                 
   332                                 
   333                                 
   334                                 
   335 0000017D 48C7C000000000          mov rax, SUCCESS
   336 00000184 EB29                    jmp end
   337                                 
   338                                 
   339                                 
   340                                 
   341                                  overFlow:
   342 00000186 48C7C004000000          mov rax, INPUTOVERFLOW
   343 0000018D EB20                    jmp end
   344                                 
   345                                  notBinary:
   346 0000018F 48C7C001000000          mov rax, NOSUCCESS
   347 00000196 EB17                    jmp end
   348                                 
   349                                  lessThanMin:
   350 00000198 48C7C002000000          mov rax, OUTOFRANGEMIN
   351 0000019F EB0E                    jmp end
   352                                 
   353                                  greaterThanMax:
   354 000001A1 48C7C003000000          mov rax, OUTOFRANGEMAX
   355 000001A8 EB05                    jmp end
   356                                 
   357                                  noInput:
   358 000001AA 48C7C005000000          mov rax, ENDOFINPUT
   359                                 
   360                                 end:
   361                                 
   362                                 
   363 000001B1 4158                   pop r8
   364 000001B3 415C                   pop r12
   365 000001B5 5B                     pop rbx
   366 000001B6 5A                     pop rdx
   367 000001B7 59                     pop rcx
   368 000001B8 5E                     pop rsi
   369                                 
   370 000001B9 C3                     ret
   371                                 
   372                                 
   373                                 
   374                                 
   375                                 
   376                                 
   377                                 
   378                                 
   379                                 
   380                                 
   381                                 
   382                                 
   383                                 
   384                                 
   385                                 
   386                                 
   387                                 
   388                                 [global cubeAreas]
   389                                 cubeAreas:
   390                                 
   391                                 
   392                                 
   393 000001BA 50                      push rax
   394 000001BB 51                      push rcx
   395 000001BC 4150                    push r8
   396                                 
   397 000001BE 4989D0                  mov r8, rdx
   398 000001C1 48C7C200000000          mov rdx, 0
   399 000001C8 48C7C000000000          mov rax, 0
   400 000001CF 48C7C100000000          mov rcx, 0
   401                                 
   402                                  getAreas:
   403 000001D6 8B048F                  mov eax, dword[rdi+(rcx*4)]
   404 000001D9 F7E8                    imul eax
   405 000001DB F72C25[00000000]        imul dword [ddSix]
   406                                 
   407 000001E2 41890488                mov dword[r8+(rcx*4)],eax
   408                                 
   409                                 
   410                                 
   411 000001E6 48FFC1                  inc rcx
   412 000001E9 39F1                    cmp ecx,esi
   413 000001EB 72E7                    jb getAreas
   414                                 
   415 000001ED 48C7C200000000          mov rdx,0
   416 000001F4 4C89C2                  mov rdx,r8
   417                                 
   418 000001F7 4158                    pop r8
   419 000001F9 59                      pop rcx
   420 000001FA 58                      pop rax
   421                                 
   422 000001FB C3                     ret
   423                                 
   424                                 
   425                                 
   426                                 
   427                                 
   428                                 
   429                                 
   430                                 
   431                                 
   432                                 
   433                                 
   434                                 
   435                                 
   436                                 
   437                                 
   438                                 
   439                                 
   440                                 
   441                                 
   442                                 
   443                                 
   444                                 
   445                                 
   446                                 
   447                                 
   448                                 
   449                                 
   450                                 
   451                                 
   452                                 
   453                                 
   454                                 
   455                                 
   456                                 
   457                                 
   458                                 
   459                                 
   460                                 
   461                                 
   462                                 
   463                                 
   464                                 
   465                                 
   466                                 
   467                                 
   468                                 
   469                                 
   470                                 
   471                                 
   472                                 
   473                                 
   474                                 
   475                                 
   476                                 [global cocktailSort]
   477                                 cocktailSort:
   478                                 
   479                                 
   480                                 
   481                                 
   482                                 
   483 000001FC 50                     push rax
   484 000001FD 4154                   push r12
   485 000001FF 4156                   push r14
   486 00000201 4157                   push r15
   487                                 
   488 00000203 41BA00000000            mov r10d, 0
   489                                 
   490 00000209 4189F3                  mov r11d, esi
   491 0000020C 41FFCB                  dec r11d
   492                                 
   493 0000020F 49C7C401000000          mov r12, TRUE
   494                                 
   495                                  whileLoop:
   496                                 
   497 00000216 4983FC01                cmp r12, TRUE
   498 0000021A 756F                    jne endofWhile
   499                                 
   500 0000021C 49C7C400000000          mov r12, FALSE
   501                                 
   502 00000223 48C7C000000000          mov rax, 0
   503                                 
   504                                 
   505                                 
   506                                 
   507 0000022A 4489D0                  mov eax, r10d
   508                                 
   509                                  forLoop1:
   510                                 
   511 0000022D 4439D8                  cmp eax, r11d
   512 00000230 7320                    jae endofFL1
   513                                 
   514 00000232 448B3487                mov r14d, dword[rdi+(rax*4)]
   515 00000236 448B7C8704              mov r15d, dword[rdi+(rax*4)+4]
   516                                 
   517 0000023B 4539FE                  cmp r14d,r15d
   518 0000023E 730E                    jae leftValueisSmaller
   519                                 
   520 00000240 4489748704              mov dword [rdi+(rax*4)+4], r14d
   521 00000245 44893C87                mov dword [rdi +(rax*4)], r15d
   522 00000249 49C7C401000000          mov r12 , TRUE
   523                                 
   524                                  leftValueisSmaller:
   525                                 
   526                                 
   527 00000250 FFC0                    inc eax
   528 00000252 EBD7                    jmp forLoop1
   529                                 
   530                                  endofFL1:
   531                                 
   532                                 
   533                                 
   534 00000254 48C7C000000000          mov rax, 0
   535                                 
   536 0000025B 41FFCB                  dec r11d
   537 0000025E 4489D8                  mov eax, r11d
   538                                 
   539                                 
   540                                  forLoop2:
   541                                 
   542 00000261 4439D0                  cmp eax, r10d
   543 00000264 7620                    jbe endofFL2
   544                                 
   545 00000266 448B3487                mov r14d, dword[rdi+(rax*4)]
   546 0000026A 448B7C87FC              mov r15d, dword[rdi+(rax*4)-4]
   547                                 
   548 0000026F 4539FE                  cmp r14d,r15d
   549 00000272 760E                    jbe rightValueisSmaller
   550                                 
   551 00000274 44893C87                mov dword[rdi+(rax*4)], r15d
   552 00000278 44897487FC              mov dword[rdi+(rax*4)-4], r14d
   553                                 
   554 0000027D 49C7C401000000          mov r12, TRUE
   555                                 
   556                                  rightValueisSmaller:
   557                                 
   558 00000284 FFC8                    dec eax
   559 00000286 EBD7                    jmp forLoop2
   560                                 
   561                                  endofFL2:
   562                                 
   563                                 
   564                                 
   565                                 
   566 00000288 41FFC2                  inc r10d
   567 0000028B EB87                    jmp whileLoop
   568                                 
   569                                  endofWhile:
   570                                 
   571 0000028D 415F                   pop r15
   572 0000028F 415E                   pop r14
   573 00000291 415C                   pop r12
   574 00000293 58                     pop rax
   575                                 
   576 00000294 C3                     ret
   577                                 
   578                                 
   579                                 
   580                                 
   581                                 
   582                                 
   583                                 
   584                                 
   585                                 
   586                                 
   587                                 
   588                                 
   589                                 
   590                                 
   591                                 
   592                                 
   593                                 
   594                                 
   595                                 
   596                                 
   597                                 
   598                                 
   599                                 
   600                                 
   601                                 
   602                                 [global cubeStats]
   603                                 cubeStats:
   604                                 
   605 00000295 55                     push rbp
   606 00000296 4889E5                 mov rbp, rsp
   607 00000299 50                     push rax
   608 0000029A 53                     push rbx
   609 0000029B 4157                   push r15
   610                                 
   611                                 
   612                                 
   613 0000029D 48C7C000000000          mov rax,0
   614 000002A4 49C7C700000000          mov r15,0
   615 000002AB 448B3F                  mov r15d, dword [rdi]
   616 000002AE 448939                  mov dword[rcx],r15d
   617                                 
   618 000002B1 4863C6                  movsxd rax, esi
   619 000002B4 48FFC8                  dec rax
   620 000002B7 448B3C87                mov r15d, dword[rdi+(rax*4)]
   621 000002BB 44893A                  mov dword[rdx], r15d
   622                                 
   623                                 
   624                                 
   625 000002BE 48C7C100000000          mov rcx,0
   626 000002C5 48C7C300000000          mov rbx,0
   627 000002CC 41C70000000000          mov dword[r8],0
   628                                 
   629                                  statsLoop:
   630 000002D3 48C7C200000000          mov rdx,0
   631 000002DA 48C7C000000000          mov rax,0
   632                                 
   633 000002E1 8B048F                  mov eax, dword[rdi+(rcx*4)]
   634 000002E4 410100                  add dword[r8], eax
   635                                 
   636                                 
   637 000002E7 99                      cdq
   638 000002E8 F73C25[00000000]        idiv dword [ddFour]
   639                                 
   640 000002EF 83FA00                  cmp edx,0
   641 000002F2 7503                    jne notDivBy4
   642                                 
   643 000002F4 8B048F                  mov eax, dword[rdi+(rcx*4)]
   644 000002F7 01C3                    add ebx, eax
   645                                 
   646                                  notDivBy4:
   647                                 
   648                                 
   649 000002F9 48FFC1                  inc rcx
   650 000002FC 39F1                    cmp ecx,esi
   651 000002FE 72D1                    jb statsLoop
   652                                 
   653 00000300 48C7C000000000          mov rax,0
   654 00000307 488B4510                mov rax , qword[rbp+16]
   655                                 
   656 0000030B C70000000000            mov dword[rax],0
   657 00000311 8918                    mov dword[rax],ebx
   658                                 
   659                                 
   660 00000313 48C7C000000000          mov rax, 0
   661 0000031A 418B00                  mov eax, dword[r8]
   662 0000031D 99                      cdq
   663 0000031E F7FE                    idiv esi
   664 00000320 418901                  mov dword [r9], eax
   665                                 
   666 00000323 415F                   pop r15
   667 00000325 5B                     pop rbx
   668 00000326 58                     pop rax
   669 00000327 5D                     pop rbp
   670                                 
   671 00000328 C3                     ret
   672                                 
   673                                 
   674                                 
   675                                 
   676                                 
   677                                 
   678                                 
   679                                 
   680                                 
   681                                 
   682                                 
   683                                 
   684                                 
   685                                 
   686                                 
   687                                 
   688                                 
   689                                 
   690                                 [global iMedian]
   691                                 iMedian:
   692                                 
   693 00000329 53                     push rbx
   694 0000032A 52                     push rdx
   695 0000032B 4150                   push r8
   696                                 
   697 0000032D 48C7C000000000          mov rax, 0
   698 00000334 48C7C200000000          mov rdx, 0
   699 0000033B 49C7C002000000          mov r8,2
   700                                 
   701 00000342 4863C6                  movsxd rax, esi
   702 00000345 49F7F0                  div r8
   703                                 
   704 00000348 49C7C000000000          mov r8,0
   705                                 
   706 0000034F 4883FA00                cmp rdx, 0
   707 00000353 740E                    je evenList
   708                                 
   709                                 
   710 00000355 448B0487                mov r8d, dword[rdi+(rax*4)]
   711 00000359 48C7C000000000          mov rax,0
   712 00000360 4489C0                  mov eax, r8d
   713 00000363 EB14                    jmp medDone
   714                                 
   715                                  evenList:
   716 00000365 44030487                add r8d, dword[rdi+(rax*4)]
   717 00000369 44034487FC              add r8d, dword[rdi+(rax*4)-4]
   718 0000036E 41D1F8                  sar r8d,1
   719 00000371 48C7C000000000          mov rax,0
   720 00000378 4489C0                  mov eax,r8d
   721                                 
   722                                  medDone:
   723                                 
   724 0000037B 4158                   pop r8
   725 0000037D 5A                     pop rdx
   726 0000037E 5B                     pop rbx
   727                                 
   728 0000037F C3                     ret
   729                                 
   730                                 
   731                                 
   732                                 
   733                                 
   734                                 
   735                                 
   736                                 
   737                                 
   738                                 
   739                                 
   740                                 
   741                                 
   742                                 
   743                                 
   744                                 
   745                                 
   746                                 
   747                                 [global mStatistic]
   748                                 mStatistic:
   749                                 
   750 00000380 51                      push rcx
   751 00000381 52                      push rdx
   752 00000382 53                      push rbx
   753                                 
   754 00000383 48C7C000000000          mov rax, 0
   755 0000038A 48C7C100000000          mov rcx, 0
   756 00000391 49C7C200000000          mov r10, 0
   757 00000398 4C63DE                  movsxd r11, esi
   758                                 
   759                                 
   760                                 
   761                                  mStatLoop:
   762                                 
   763 0000039B 49C7C200000000          mov r10, 0
   764 000003A2 E87DFFFFFF              call iMedian
   765 000003A7 4898                    cdqe
   766                                 
   767 000003A9 448B148F                mov r10d,dword[rdi+(rcx*4)]
   768                                 
   769 000003AD 4929C2                  sub r10, rax
   770 000003B0 4C89D0                  mov rax, r10
   771 000003B3 48F7E8                  imul rax
   772                                 
   773                                 
   774 000003B6 4801C3                  add rbx, rax
   775                                 
   776 000003B9 48FFC1                  inc rcx
   777 000003BC 4C39D9                  cmp rcx, r11
   778 000003BF 72D8                    jb mStatLoop
   779                                 
   780 000003C1 4889D8                  mov rax, rbx
   781                                 
   782                                 
   783 000003C4 5B                      pop rbx
   784 000003C5 5A                      pop rdx
   785 000003C6 59                      pop rcx
   786                                 
   787                                 
   788 000003C7 C3                     ret
   789                                 
   790                                 
   791                                 
